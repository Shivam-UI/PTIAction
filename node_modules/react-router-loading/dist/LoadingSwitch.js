"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouter = require("react-router");

var _LoadingContext = require("./LoadingContext");

var _LoadingMiddleware = _interopRequireDefault(require("./LoadingMiddleware"));

var _DefaultLoadingScreen = _interopRequireDefault(require("./DefaultLoadingScreen"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var loadingPathname = '__loading';

var Switcher = function Switcher(_ref) {
  var children = _ref.children,
      LoadingScreen = _ref.loadingScreen,
      _ref$maxLoadingTime = _ref.maxLoadingTime,
      maxLoadingTime = _ref$maxLoadingTime === void 0 ? 0 : _ref$maxLoadingTime;
  var context = (0, _react.useContext)(_reactRouter.__RouterContext);
  var loadingContext = (0, _react.useContext)(_LoadingContext.LoadingContext);
  var isCurrentlyLoading = (0, _react.useContext)(_LoadingContext.LoadingGetterContext);

  var _useState = (0, _react.useState)(function () {
    var isFirstPageLoadable = (0, _utils.isLoadable)(context, children); // if first page uses loading then show loading screen

    // if first page uses loading then show loading screen
    return isFirstPageLoadable ? _objectSpread(_objectSpread({}, context), {}, {
      location: {
        pathname: loadingPathname
      }
    }) : context;
  }),
      _useState2 = _slicedToArray(_useState, 2),
      current = _useState2[0],
      setCurrent = _useState2[1];

  var _useState3 = (0, _react.useState)(current),
      _useState4 = _slicedToArray(_useState3, 2),
      next = _useState4[0],
      setNext = _useState4[1];

  var timeout = (0, _react.useRef)(); // when location changed

  (0, _react.useEffect)(function () {
    // if not the same route mount it to start loading
    if ((0, _utils.isPathsDifferent)(context, next)) {
      var isPageLoadable = (0, _utils.isLoadable)(context, children);
      setNext(_objectSpread({}, context));

      if (!isPageLoadable) {
        loadingContext.done();
        setCurrent(_objectSpread({}, context));
      } else {
        if (!isCurrentlyLoading) loadingContext.start();else loadingContext.restart();
      }
    } // if same as current route stop loading


    if ((0, _utils.isPathsEqual)(context, current)) {
      loadingContext.done();
      if ((0, _utils.isSearchDifferent)(context, current)) setCurrent(_objectSpread({}, context));
    }
  }, [context]); // when loading ends

  (0, _react.useEffect)(function () {
    if (!isCurrentlyLoading && (0, _utils.isPathsDifferent)(current, next)) setCurrent(next);
  }, [isCurrentlyLoading]); // setTimeout if maxLoadingTime is provided

  (0, _react.useEffect)(function () {
    if (maxLoadingTime > 0) {
      if (timeout.current) {
        clearTimeout(timeout.current);
        timeout.current = undefined;
      }

      if ((0, _utils.isPathsDifferent)(current, next)) {
        timeout.current = setTimeout(function () {
          loadingContext.done();
        }, maxLoadingTime);
      }
    }
  }, [current, next]); // memo current and next components

  return (0, _react.useMemo)(function () {
    var _current$location, _next$location;

    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, current.location.pathname !== loadingPathname ? /*#__PURE__*/_react["default"].createElement(RouteComponent, {
      key: (_current$location = current.location) === null || _current$location === void 0 ? void 0 : _current$location.pathname,
      context: current,
      allRoutes: children
    }) : LoadingScreen ? /*#__PURE__*/_react["default"].createElement(LoadingScreen, {
      location: current.location
    }) : /*#__PURE__*/_react["default"].createElement(_DefaultLoadingScreen["default"], {
      location: current.location
    }), (0, _utils.isPathsDifferent)(current, next) && /*#__PURE__*/_react["default"].createElement(RouteComponent, {
      key: (_next$location = next.location) === null || _next$location === void 0 ? void 0 : _next$location.pathname,
      context: next,
      allRoutes: children,
      hidden: true
    }));
  }, [current, next]);
}; // necessary wrappings around route.component


var RouteComponent = function RouteComponent(_ref2) {
  var context = _ref2.context,
      allRoutes = _ref2.allRoutes,
      hidden = _ref2.hidden;
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: hidden ? {
      display: 'none'
    } : undefined
  }, (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(_reactRouter.__RouterContext.Provider, {
      value: context
    }, /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
      fallback: null
    }, (0, _utils.findMatchingElement)(context, allRoutes)));
  }, [context]));
}; // combine topbar and switch


var LoadingSwitch = function LoadingSwitch(_ref3) {
  var children = _ref3.children,
      loadingScreen = _ref3.loadingScreen,
      maxLoadingTime = _ref3.maxLoadingTime,
      isLoading = _ref3.isLoading;
  return /*#__PURE__*/_react["default"].createElement(_LoadingMiddleware["default"], {
    isLoading: isLoading
  }, /*#__PURE__*/_react["default"].createElement(Switcher, {
    loadingScreen: loadingScreen,
    maxLoadingTime: maxLoadingTime
  }, children));
};

var _default = LoadingSwitch;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,